<?php

namespace App\Users;

use App\Charge;
use App\DebitOrder;
use App\Billing\Invoice;
use App\AppEvents\Ticket;
use App\Activities\Activity;
use App\Store\Order;
use App\Store\Product;
use App\Subscriptions\Subscription;
use App\Subscriptions\SubscriptionTrait;
use Illuminate\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Auth\Passwords\CanResetPassword;
use Illuminate\Foundation\Auth\Access\Authorizable;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;

/**
 * Class User
 * @package App\Users
 */
class User extends Model implements AuthenticatableContract,
    AuthorizableContract,
    CanResetPasswordContract
{
    use Authenticatable, Authorizable, CanResetPassword, SoftDeletes, HasRoles, SubscriptionTrait;

    /**
     * @var string
     */
    protected $table = 'users';
    /**
     * @var array
     */
    protected $fillable = ['first_name', 'last_name', 'email', 'password'];
    /**
     * @var array
     */
    protected $hidden = ['password', 'remember_token'];
    /**
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function tickets()
    {
        return $this->hasMany(Ticket::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function profile()
    {
        return $this->hasOne(Profile::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function addresses()
    {
        return $this->hasMany(Address::class);
    }

    /**
     * @param $type
     * @return mixed
     */
    public function getAddress($type)
    {
        return $this->addresses()->whereType($type)->first();
    }

    /**
     * @return mixed
     */
    public function cpds()
    {
        return $this->hasMany(Cpd::class)->orderBy('date', 'desc');
    }

    /**
     * @return mixed
     */
    public function activity()
    {
        return $this->hasMany(Activity::class)->with(['user', 'subject'])->latest();
    }

    /**
     * @param $request
     */
    public function updateProfile($request)
    {
        $this->update($request->only('first_name', 'last_name'));
        $this->profile()->update($request->only('position', 'cell', 'company', 'tax', 'website', 'about_me', 'id_number'));
    }

    /**
     * @param $name
     * @param $related
     * @return mixed
     */
    public function recordActivity($name, $related)
    {
        return $related->recordActivity($name);
    }

    /**
     * @param $password
     */
    public function setPasswordAttribute($password)
    {
        $this->attributes['password'] = bcrypt($password);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function charges()
    {
        return $this->hasMany(Charge::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function subscription()
    {
        return $this->hasOne(Subscription::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function debit()
    {
        return $this->hasOne(DebitOrder::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function invoices()
    {
        return $this->hasMany(Invoice::class);
    }

    public function addInvoices($invoices)
    {
        return $this->invoices()->saveMany($invoices);
    }

    public function addInvoice($invoice)
    {
        return $this->addInvoices([$invoice]);
    }

    public function isRegisteredForEvent($event)
    {
        foreach ($this->tickets as $ticket) {
            if ($ticket->event->id == $event->id)
                return true;
        }
        return false;
    }

<<<<<<< HEAD
    public function products()
    {
        return $this->belongsToMany(Product::class, 'store_orders')->withTimestamps();
    }

    public function addProduct($product, $invoice = null)
    {
        if ($invoice)
            return $this->products()->save($product, [
                'invoice_id' => $invoice->id
            ]);

        return $this->products()->save($product);
    }

    public function productsWithResources()
    {
        return $this->products()->with(['links', 'files']);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
=======
    public function register($first_name, $last_name, $email, $password)
    {
        return new static(compact('first_name', 'last_name', 'email', 'password'));
>>>>>>> bbe69ffa0eed458230796af431effc86b1bc0eaf
    }
}
